<!--pages/wxml/wxml.wxml-->
<!-- 1.wxml的基本格式 -->
<!-- 1.1 wxml类似于html也有双标签和单标签 -->
<view></view>
<input/>

<!-- 1.2 wxml标签必须有严格闭合, 没有闭合的话会报错 -->
<!-- 双标签没有结尾标签, 会报错 -->
<!-- <view> -->
<!-- 单标签没有结尾符号, 会报错 -->
<!-- <input> -->

<!-- 1.3 wxml组件中的属性严格区分大小写 -->
<!-- 这里的class属性和Class属性是不一样的 -->
<view class="" Class=""></view>

<!-- mustache语法的使用 -->
<!-- 基本使用 -->
<view>{{message}}</view>
<!-- mustache语法中可以写表达式 -->
<view>{{name}} {{age}}</view>
<view>{{name + " " + age}}</view>
<view>{{age >= 18 ? "成年人" : "未成年人"}}</view>

<view>{{nowTime}}</view>

<!-- mustache语法也可以用于绑定属性 -->
<button size="mini" bindtap="handleTextColor">切换颜色</button>
<view class="box {{isActive ? 'active' : ''}}">你好你好</view>

<view>---------------</view>
<!-- wx:if 逻辑判断 -->
<!-- 跟vue中的v-if一样用法 -->
<!-- 当组件的wx:if值为true的时候, 该组件就会渲染, 否则该组件不会渲染到DOM中 -->
<button size="mini" bindtap="handleShow">切换显示</button>
<view wx:if="{{isShow}}">你好</view>

<!-- wx:elif / wx:else -->
<!-- 跟vue中的v-else-if / v-else 一样用法 -->
<button size="mini" bindtap="handleScroe">加十分</button>
<view wx:if="{{scroe >= 90}}">优秀</view>
<view wx:elif="{{scroe >= 70}}">良好</view>
<view wx:elif="{{scroe >= 60}}">及格</view>
<view wx:else>不及格</view>

<!-- hidden属性 -->
<!-- 跟vue中的v-show属性一样, 只不过是相反的 -->
<view hidden="{{true}}">你好</view>

<!-- hidden属性和wx-if用于隐藏组件的区别 -->
<!-- hidden属性隐藏组件的本质是给组件添加了一个display: none 样式, 所以组件还是会渲染在DOM中的 -->
<!-- 而wx:if隐藏组件的本质是控制组件是否渲染在DOM中 -->
<!-- 如何在正确的场景中选择这两个属性呢 -->
<!-- 如果组件的显示隐藏切换十分频繁的话使用hidden属性 -->
<!-- 如果组件的显示隐藏切换不频繁的话使用wx:if属性 -->

<view>-----------------</view>
<!-- wx:for遍历 -->
<!-- wx:for 可以遍历数组/字符/数字 -->
<!-- 遍历数组 -->
<view wx:for="{{['你好','我好','大家好']}}"  wx:key="*this">{{item}}</view>
<!-- 遍历字符 -->
<view wx:for="xiaoLam"  wx:key="*this">{{item}}</view>
<!-- 遍历数字, 注意使用mustache语法, 否则渲染的时候会任务是一个字符串 -->
<view wx:for="{{3}}"  wx:key="*this">{{item}}</view>

<!-- block标签 -->
<!-- block标签用于包裹一组组件, 然后对这组组件进行整体操作, 取代用view组件作为包裹的容器 -->
<!-- block标签并不是一个组件, 只是一个标签, 最终block并不会渲染在页面上, 其只接收控制属性 -->
<!-- 不要给block标签添加其他的样式等属性 -->
<!-- 使用block标签的好处 -->
<!-- 提供整体操作的作用 -->
<!-- 比使用view作为包裹容器有更高的性能 -->
<block wx:if="{{true}}">
  <view>xiaoLam</view>
  <view>18</view>
  <view>1.88</view>
</block>

<block wx:for="{{2}}" wx:key="*this">
  <view>xiaoLam</view>
  <view>18</view>
  <view>1.88</view>
</block>

<!-- 给使用wx:for的组件使用wx:key提升性能 -->
<!-- 这个的作用是跟vue中的 :key是一样的 -->
<!-- wx:key 的值以两种形式提供 -->
<!-- 字符串，代表在 for 循环的 array 中 item 的某个 property，该 property 的值需要是列表中唯一的字符串或数字，且不能动态改变。 -->
<!-- 保留关键字 *this 代表在 for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字。 -->
<!-- 不要用index作为key, 如果用index作为key的话仅仅会消除警告而不能达到提高性能的效果 -->

<!-- template模板 -->
<!-- <template name="testTemplate">
  <button size="mini">{{btnContent}}</button>
  <view>{{viewContent}}</view>
</template> -->

<!-- 使用import引入模板 -->
<import src="/wxml/template.wxml"></import>

<!-- 使用data属性想template模板传入数据 -->
<template is="testTemplate" data="{{btnContent: '按钮', viewContent:'你好你好'}}"></template>


<!-- 使用include引入组件 -->
<include src="/wxml/nav.wxml"></include>

